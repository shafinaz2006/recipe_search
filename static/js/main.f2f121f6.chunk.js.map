{"version":3,"sources":["utils/searchRecipeHook.js","Components/SearchForm/index.tsx","Components/Recipe/index.tsx","Components/AllRecipes/AllRecipes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchRecipeHook","useState","recipeSearch","setRecipeSearch","isLoading","setIsLoading","display","setDisplay","recipeFound","setRecipeFound","useEffect","getSearchString","event","target","value","searchRecipe","preventDefault","axios","get","then","response","data","hits","catch","error","console","log","SearchForm","props","onSubmit","htmlFor","type","id","name","onChange","placeholder","Recipe","recipe","className","src","image","alt","label","Math","round","calories","ingredientLines","map","ing","j","href","url","AllRecipes","i","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAkCeA,MA/Bf,WACE,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAsCN,mBAAS,IAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAwBA,OALAC,qBAAU,WACRH,GAAW,GACXF,GAAa,KACZ,CAACG,IAEG,CAACA,cAAaN,eAAcE,YAAWE,UAASK,gBApB/B,SAACC,GACvBT,EAAgBS,EAAMC,OAAOC,QAmByCC,aAdnD,SAACH,GACpBA,EAAMI,iBACNX,GAAa,GACbY,IACGC,IADH,8DAC8DhB,EAD9D,mFAEGiB,MAAK,SAAAC,GAAQ,OAAIX,EAAeW,EAASC,KAAKC,SAC9CC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,yBAA0BF,S,OCZ7CG,EAVI,SAACC,GAClB,IAAOb,EAA+Ca,EAA/Cb,aAAcJ,EAAiCiB,EAAjCjB,gBAAiBT,EAAgB0B,EAAhB1B,aACtC,OACE,uBAAM2B,SAAU,SAAAjB,GAAK,OAAIG,EAAaH,IAAtC,UACE,uBAAOkB,QAAQ,SAAf,gCACA,uBAAOC,KAAK,OAAQC,GAAG,SAASC,KAAK,eAAeC,SAAUvB,EAAiBG,MAAOZ,EAAciC,YAAY,UAChH,gDCcSC,G,MAnBA,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,OACf,OACE,0BAASC,UAAU,SAAnB,UACE,qBAAKC,IAAKF,EAAOG,MAAOC,IAAI,cAAcH,UAAU,gBACpD,mBAAGA,UAAU,cAAb,SAA4BD,EAAOK,QACnC,oBAAGJ,UAAU,gBAAb,uBAAwCK,KAAKC,MAAMP,EAAOQ,UAA1D,UACA,sBAAKP,UAAU,mBAAf,UACE,mBAAGA,UAAU,iBAAb,0BACA,6BACCD,EAAOS,gBACNT,EAAOS,gBAAgBC,KAAI,SAACC,EAASC,GAAV,OACzB,mCAAcD,IAALC,MAAiB,QAGhC,mBAAGC,KAAMb,EAAOc,IAAKtC,OAAO,UAAUyB,UAAU,gBAAhD,4BCHSc,G,MAVI,SAAC,GAA2C,IAAzC5C,EAAwC,EAAxCA,YACpB,OACE,yBAAS8B,UAAU,aAAnB,SACI9B,EAAcA,EAAYuC,KAAI,SAACV,EAAagB,GAAd,OAA4B,cAAC,EAAD,CAAQhB,OAAQA,EAAOA,QAAagB,MAE9F,kDCaOC,MAhBf,WACE,MAIwBtD,IAJjBQ,EAAP,EAAOA,YACAN,EADP,EACOA,aACAE,EAFP,EAEOA,UACAO,EAHP,EAGOA,gBACAI,EAJP,EAIOA,aACP,OACE,uBAAMuB,UAAU,MAAhB,UACE,oDACA,cAAC,EAAD,CAAYvB,aAAcA,EAAcJ,gBAAiBA,EAAiBT,aAAcA,IACvFE,EAAW,6CAAsB,GAClC,cAAC,EAAD,CAAYI,YAAaA,QCFhB+C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f2f121f6.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction SearchRecipeHook() {\n  const [recipeSearch, setRecipeSearch] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [display, setDisplay] = useState(false);\n  const [recipeFound, setRecipeFound] = useState([]);\n\n  // input change event:\n\n  const getSearchString = (event) => {\n    setRecipeSearch(event.target.value);\n  }\n\n  // axios search recipe request:\n\n  const searchRecipe = (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n    axios\n      .get(`https://api.edamam.com/api/recipes/v2?type=public&q=${recipeSearch}&app_id=202b54b2&app_key=aacb28831d67e34e10029db642233e04%09&imageSize=REGULAR`)\n      .then(response => setRecipeFound(response.data.hits))\n      .catch(error => console.log('Error in response data', error));\n  }\n\n  useEffect(() => {\n    setDisplay(true);\n    setIsLoading(false);\n  }, [recipeFound]);\n\n  return {recipeFound, recipeSearch, isLoading, display, getSearchString, searchRecipe}\n}\n\nexport default SearchRecipeHook;\n","\nconst SearchForm = (props: any) =>{\n  const {searchRecipe, getSearchString, recipeSearch} = props;\n  return(\n    <form onSubmit={event => searchRecipe(event)}>\n      <label htmlFor='search'>Enter your query: </label>\n      <input type='text'  id='search' name='recipeSearch' onChange={getSearchString} value={recipeSearch} placeholder='query'/>\n      <button >Search</button>\n    </form>\n  )\n}\nexport default SearchForm;","import './style.css';\n\nconst Recipe = ({recipe}: {recipe:any}) =>{\n  return(\n    <section className='recipe'>\n      <img src={recipe.image} alt='recipeImage' className='recipeImage'/>\n      <p className='recipeLabel'>{recipe.label}</p>\n      <p className='recipeCalorie'>Calories: {Math.round(recipe.calories)} cal</p>\n      <div className='recipeIngredient'>\n        <p className='recipeIngLabel'>Ingredients:</p>\n        <ul>\n        {recipe.ingredientLines? \n          recipe.ingredientLines.map((ing:any, j:number) => \n            <li key={j}> {ing}</li>): ''}\n        </ul>\n      </div>\n      <a href={recipe.url} target='__blank' className='recipeDetails'> Details </a>\n    </section>\n  )\n}\n\nexport default Recipe;","import Recipe from '../Recipe/index';\nimport './style.css';\n\nconst AllRecipes = ({ recipeFound }: { recipeFound: any }) => {\n  return (\n    <section className='allRecipes'>\n      { recipeFound ? recipeFound.map((recipe: any, i: number) => <Recipe recipe={recipe.recipe} key={i} />)\n        : \n        '<h1> No recipe found in this category </h1>'\n      }\n    </section>\n  );\n};\nexport default AllRecipes;","import './App.css';\nimport SearchRecipeHook from './utils/searchRecipeHook';\nimport SearchForm from './Components/SearchForm';\nimport AllRecipes from './Components/AllRecipes/AllRecipes';\n\nfunction App() {\n  const {recipeFound, \n         recipeSearch, \n         isLoading, \n         getSearchString, \n         searchRecipe } = SearchRecipeHook();\n  return (\n    <main className=\"App\">\n      <h1> Recipe Search App</h1>\n      <SearchForm searchRecipe={searchRecipe} getSearchString={getSearchString} recipeSearch={recipeSearch} />\n      {isLoading? <p> Loading....</p> : ''}\n      <AllRecipes recipeFound={recipeFound}/>\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}